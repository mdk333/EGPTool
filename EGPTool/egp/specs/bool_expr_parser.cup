/**
 *
 * @author Maduka Attamah
 *
 * Copyright 2011-2015 Maduka Attamah
 *
 */

/* This parser specification for the parser to parse the boolean expression part of the expanded specification */

action code {: 

:};

/* Variables */
terminal String AGENT_IDENTIFIER;

/* Types */
terminal Integer INTEGER;
terminal TRUE, FALSE;

/* Key words */
terminal AGENT, KNOWS, SECRET, INIT, FIN, EMPTYSET;

/* Program punctuations */
terminal BEGIN, END, SEMI, LPAREN, RPAREN, COLON, COMMA, LBRACE, RBRACE, PIPE;

/* Operators */
terminal MULTIPLY, PLUS, MINUS, MODULUS;
terminal DOUBLEEQUAL, LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, NOTEQUAL;

/* Set boolean operators */
terminal SUBSET, PROPERSUBSET, UNION, INTERSECTION, COMPLEMENT;

/* Boolean operators */
terminal AND, OR, IMPLIES, NOT, SETELEMENT, NOTSETELEMENT;

/* Non-terminals */
non terminal Boolean set_boolean_expr;
non terminal Integer set_expr, int_expr, set_magnitude; 
non terminal Boolean boolean_expr;
non terminal Integer set_proper, singleton, empty_set;


/* Precedences */
precedence nonassoc LPAREN, RPAREN;
precedence right NOT;
precedence left AND, OR;
precedence left IMPLIES;

precedence left MULTIPLY, MODULUS;
precedence left PLUS, MINUS;

precedence left DOUBLEEQUAL, LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, NOTEQUAL;
precedence right COMPLEMENT;
precedence left SUBSET, PROPERSUBSET, UNION, INTERSECTION;

/* The grammar */

set_boolean_expr ::= set_boolean_expr:sbe1 AND set_boolean_expr:sbe2 {: RESULT = Utilities.getSetBoolANDOperator(sbe1, sbe2); :} |
                 set_boolean_expr:sbe1 OR set_boolean_expr:sbe2 {: RESULT = Utilities.getSetBoolOROperator(sbe1, sbe2); :} |
                 set_boolean_expr:sbe1 IMPLIES set_boolean_expr:sbe2 {: RESULT = Utilities.getSetBoolImplication(sbe1, sbe2); :} |
                 NOT set_boolean_expr:sbe {: RESULT = Utilities.getSetBoolNOT(sbe); :} |
                 singleton:sing SETELEMENT set_expr:se {: RESULT = Utilities.isElementOf(sing, se); :} |
                 singleton:sing NOTSETELEMENT set_expr:se {: RESULT = Utilities.isNotElementOf(sing, se); :} |
                 set_expr:se1 SUBSET set_expr:se2 {: RESULT = Utilities.isSubset(se1, se2); :} |
                 set_expr:se1 PROPERSUBSET set_expr:se2 {: RESULT = Utilities.isProperSubset(se1, se2); :} |
                 set_expr:se1 DOUBLEEQUAL set_expr:se2 {: RESULT = Utilities.isSetExprEqual(se1, se2); :} |
                 set_expr:se1 NOTEQUAL set_expr:se2 {: RESULT = Utilities.isSetExprNotEqual(se1, se2); :} |
                 int_expr:ie1 GREATERTHAN int_expr:ie2 {: RESULT = Utilities.isIntExprGreaterThan(ie1, ie2); :} |
                 int_expr:ie1 GREATERTHANEQUAL int_expr:ie2 {: RESULT = Utilities.isIntExprGreaterThanEqual(ie1, ie2); :} |
                 int_expr:ie1 LESSTHAN int_expr:ie2 {: RESULT = Utilities.isIntExprLessThan(ie1, ie2); :} |
                 int_expr:ie1 LESSTHANEQUAL int_expr:ie2 {: RESULT = Utilities.isIntExprLessThanEqual(ie1, ie2); :} |
                 int_expr:ie1 DOUBLEEQUAL int_expr:ie2 {: RESULT = Utilities.isIntExprEqual(ie1, ie2); :} |
                 int_expr:ie1 NOTEQUAL int_expr:ie2 {: RESULT = Utilities.isIntExprNotEqual(ie1, ie2); :} |
                 TRUE {: RESULT = true; :} | FALSE {: RESULT = false; :} |
                 LPAREN set_boolean_expr:sbe RPAREN {: RESULT = sbe; :};


set_expr ::= set_expr:sm1 MINUS set_expr:sm2 {: RESULT = Utilities.getSetMinus(sm1, sm2); :} |
             set_expr:se1 INTERSECTION set_expr:se2 {: RESULT = Utilities.getSetIntersection(se1, se2); :} |
             set_expr:se1 UNION set_expr:se2 {: RESULT = Utilities.getSetUnion(se1, se2); :} |
             COMPLEMENT LPAREN set_expr:se RPAREN {: RESULT = Utilities.getSetComplement(se); :} |
             set_proper:sp {: RESULT = sp; :} | 
             singleton:sing {: RESULT = sing; :} | 
             empty_set:es {: RESULT = es; :} |
             LPAREN set_expr:se RPAREN {: RESULT = se; :};
             
set_proper ::= SECRET LPAREN AGENT_IDENTIFIER:ai RPAREN {: RESULT = Utilities.getAgentSecret(ai, this.parser.currentSituation); :}|
               FIN LPAREN AGENT_IDENTIFIER:ai RPAREN {: RESULT = Utilities.getFinalState(); :} |
               LPAREN set_proper:sp RPAREN {: RESULT = sp; :};

singleton ::= INIT LPAREN AGENT_IDENTIFIER:ai RPAREN  {: RESULT = Utilities.getAgentInitSecret(ai); :} |
              LPAREN singleton:sing RPAREN {: RESULT = sing; :};

empty_set ::= EMPTYSET {: RESULT = Utilities.getEmptySet(); :} |
              LPAREN empty_set:es RPAREN {: RESULT = es; :};

int_expr ::= int_expr:ie1 MINUS int_expr:ie2 {: RESULT = Utilities.getSubtraction(ie1, ie2); :}  |
             int_expr:ie1 PLUS int_expr:ie2  {: RESULT = Utilities.getAddition(ie1, ie2); :} |
             int_expr:ie1 MULTIPLY int_expr:ie2 {: RESULT = Utilities.getProduct(ie1, ie2); :} |
             int_expr:ie1 MODULUS int_expr:ie2 {: RESULT = Utilities.getModulus(ie1, ie2); :} |
             set_magnitude:sm {: RESULT = sm; :} |
             INTEGER:i {: RESULT = i; :} |
             LPAREN int_expr:ie RPAREN {: RESULT = ie; :};

set_magnitude ::= PIPE set_expr:se PIPE {: RESULT = Utilities.getSetMagnitude(se); :} |
                  LPAREN set_magnitude:sm RPAREN {: RESULT = sm; :};
