
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 23 01:27:48 BST 2014
//----------------------------------------------------

package egp.concurrent.parsers;

import egp.concurrent.modeller.SituationBHive;
import egp.concurrent.util.Utilities;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 23 01:27:48 BST 2014
  */
public class BoolExprParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BoolExprParser() {super();}

  /** Constructor which sets the default scanner. */
  public BoolExprParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public BoolExprParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  
  SituationBHive currentSituation;
  public BoolExprParser(java_cup.runtime.Scanner s, SituationBHive situation) {super(s); currentSituation = situation;} 

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\003\000\002\002\003" +
    "\000\002\002\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\006\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\005\000\002\007" +
    "\006\000\002\007\006\000\002\007\005\000\002\010\006" +
    "\000\002\010\005\000\002\011\003\000\002\011\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\005\000\002\005\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\030\005\021\006\011\007\017\012\016\013" +
    "\005\014\024\015\023\021\013\027\004\046\022\052\007" +
    "\001\002\000\016\012\016\013\005\014\024\015\023\021" +
    "\037\046\022\001\002\000\004\021\141\001\002\000\012" +
    "\002\140\047\132\050\133\051\131\001\002\000\030\005" +
    "\021\006\011\007\017\012\016\013\005\014\024\015\023" +
    "\021\013\027\004\046\022\052\007\001\002\000\026\030" +
    "\105\031\107\032\101\033\102\034\106\035\113\036\104" +
    "\037\110\040\112\041\103\001\002\000\014\002\ufff0\022" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000\034\002\uffe7" +
    "\022\uffe7\027\uffe7\032\uffe7\034\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002" +
    "\000\030\005\021\006\011\007\017\012\016\013\005\014" +
    "\024\015\023\021\013\027\004\046\022\052\007\001\002" +
    "\000\034\002\uffe9\022\uffe9\027\uffe9\032\uffe9\034\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\001\002\000\024\032\uffe8\034\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\053\067\054\070\001\002" +
    "\000\004\021\064\001\002\000\014\002\uffef\022\uffef\047" +
    "\uffef\050\uffef\051\uffef\001\002\000\040\002\uffda\022\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\047\uffda\050\uffda\051\uffda" +
    "\001\002\000\040\002\uffd9\022\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\047\uffd9\050\uffd9\051\uffd9\001\002\000\004\021" +
    "\061\001\002\000\034\002\uffe0\022\uffe0\027\uffe0\032\uffe0" +
    "\034\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\001\002\000\004\021\056\001\002" +
    "\000\020\032\026\034\033\041\031\042\030\043\034\044" +
    "\032\045\027\001\002\000\016\012\016\013\005\014\024" +
    "\015\023\021\037\046\022\001\002\000\016\012\016\013" +
    "\005\014\024\015\023\021\037\046\022\001\002\000\016" +
    "\012\016\013\005\014\024\015\023\021\037\046\022\001" +
    "\002\000\016\012\016\013\005\014\024\015\023\021\037" +
    "\046\022\001\002\000\016\012\016\013\005\014\024\015" +
    "\023\021\037\046\022\001\002\000\016\012\016\013\005" +
    "\014\024\015\023\021\037\046\022\001\002\000\016\012" +
    "\016\013\005\014\024\015\023\021\037\046\022\001\002" +
    "\000\022\002\ufff9\022\ufff9\032\026\044\032\045\027\047" +
    "\ufff9\050\ufff9\051\ufff9\001\002\000\034\002\uffe8\022\uffe8" +
    "\027\uffe8\032\uffe8\034\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\001\002\000\016" +
    "\012\016\013\005\014\024\015\023\021\037\046\022\001" +
    "\002\000\022\022\047\032\uffe7\034\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\001\002\000\012\022\046\032" +
    "\026\044\032\045\027\001\002\000\012\022\045\032\uffe8" +
    "\044\uffe8\045\uffe8\001\002\000\022\022\044\032\uffe9\034" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\001\002" +
    "\000\034\002\uffe3\022\uffe3\027\uffe3\032\uffe3\034\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\001\002\000\040\002\uffe1\022\uffe1\027\uffe1\032" +
    "\uffe1\034\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\053\uffe1\054\uffe1\001\002\000" +
    "\034\002\uffe6\022\uffe6\027\uffe6\032\uffe6\034\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\001\002\000\034\002\uffdf\022\uffdf\027\uffdf\032\uffdf" +
    "\034\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\001\002\000\022\002\ufff8\022\ufff8" +
    "\032\026\044\032\045\027\047\ufff8\050\ufff8\051\ufff8\001" +
    "\002\000\034\002\uffeb\022\uffeb\027\uffeb\032\uffeb\034\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\001\002\000\022\002\ufff7\022\ufff7\032\026" +
    "\044\032\045\027\047\ufff7\050\ufff7\051\ufff7\001\002\000" +
    "\022\002\ufffa\022\ufffa\032\026\044\032\045\027\047\ufffa" +
    "\050\ufffa\051\ufffa\001\002\000\034\002\uffec\022\uffec\027" +
    "\uffec\032\uffec\034\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\047\uffec\050\uffec\051\uffec\001\002\000\034\002" +
    "\uffed\022\uffed\027\uffed\032\uffed\034\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\032\045\027\047\uffed\050\uffed\051\uffed\001" +
    "\002\000\004\004\057\001\002\000\004\022\060\001\002" +
    "\000\034\002\uffe4\022\uffe4\027\uffe4\032\uffe4\034\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\001\002\000\016\012\016\013\005\014\024\015" +
    "\023\021\037\046\022\001\002\000\012\022\063\032\026" +
    "\044\032\045\027\001\002\000\034\002\uffea\022\uffea\027" +
    "\uffea\032\uffea\034\uffea\041\uffea\042\uffea\043\uffea\044\uffea" +
    "\045\uffea\047\uffea\050\uffea\051\uffea\001\002\000\004\004" +
    "\065\001\002\000\004\022\066\001\002\000\034\002\uffe5" +
    "\022\uffe5\027\uffe5\032\uffe5\034\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5\001\002" +
    "\000\016\012\016\013\005\014\024\015\023\021\037\046" +
    "\022\001\002\000\016\012\016\013\005\014\024\015\023" +
    "\021\037\046\022\001\002\000\022\002\ufffb\022\ufffb\032" +
    "\026\044\032\045\027\047\ufffb\050\ufffb\051\ufffb\001\002" +
    "\000\022\002\ufffc\022\ufffc\032\026\044\032\045\027\047" +
    "\ufffc\050\ufffc\051\ufffc\001\002\000\012\022\130\047\132" +
    "\050\133\051\131\001\002\000\030\022\111\030\105\031" +
    "\107\032\101\033\102\034\106\035\113\036\104\037\110" +
    "\040\112\041\103\001\002\000\026\022\045\032\uffe8\034" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\053\067" +
    "\054\070\001\002\000\030\022\100\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\001\002\000\022\022\046\032\026\034\033\041" +
    "\031\042\030\043\034\044\032\045\027\001\002\000\040" +
    "\002\uffd6\022\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\001\002\000\010\005\021\021\114\027" +
    "\004\001\002\000\010\005\021\021\114\027\004\001\002" +
    "\000\010\005\021\021\114\027\004\001\002\000\010\005" +
    "\021\021\114\027\004\001\002\000\010\005\021\021\114" +
    "\027\004\001\002\000\010\005\021\021\114\027\004\001" +
    "\002\000\010\005\021\021\114\027\004\001\002\000\010" +
    "\005\021\021\114\027\004\001\002\000\040\002\uffd8\022" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\001\002\000\010\005\021\021\114\027\004\001\002" +
    "\000\010\005\021\021\114\027\004\001\002\000\010\005" +
    "\021\021\114\027\004\001\002\000\024\002\ufff4\022\ufff4" +
    "\030\105\031\107\032\101\033\102\047\ufff4\050\ufff4\051" +
    "\ufff4\001\002\000\014\022\111\030\105\031\107\032\101" +
    "\033\102\001\002\000\024\002\ufff5\022\ufff5\030\105\031" +
    "\107\032\101\033\102\047\ufff5\050\ufff5\051\ufff5\001\002" +
    "\000\024\002\ufff6\022\ufff6\030\105\031\107\032\101\033" +
    "\102\047\ufff6\050\ufff6\051\ufff6\001\002\000\040\002\uffdd" +
    "\022\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\001\002\000\024\002\ufff2\022\ufff2\030\105\031" +
    "\107\032\101\033\102\047\ufff2\050\ufff2\051\ufff2\001\002" +
    "\000\040\002\uffdc\022\uffdc\030\uffdc\031\107\032\101\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\001\002\000\024\002\ufff3\022" +
    "\ufff3\030\105\031\107\032\101\033\102\047\ufff3\050\ufff3" +
    "\051\ufff3\001\002\000\024\002\ufff1\022\ufff1\030\105\031" +
    "\107\032\101\033\102\047\ufff1\050\ufff1\051\ufff1\001\002" +
    "\000\040\002\uffdb\022\uffdb\030\uffdb\031\107\032\101\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\001\002\000\040\002\uffde\022" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\047\uffde\050\uffde\051" +
    "\uffde\001\002\000\014\002\uffee\022\uffee\047\uffee\050\uffee" +
    "\051\uffee\001\002\000\030\005\021\006\011\007\017\012" +
    "\016\013\005\014\024\015\023\021\013\027\004\046\022" +
    "\052\007\001\002\000\030\005\021\006\011\007\017\012" +
    "\016\013\005\014\024\015\023\021\013\027\004\046\022" +
    "\052\007\001\002\000\030\005\021\006\011\007\017\012" +
    "\016\013\005\014\024\015\023\021\013\027\004\046\022" +
    "\052\007\001\002\000\014\002\uffff\022\uffff\047\uffff\050" +
    "\uffff\051\131\001\002\000\014\002\001\022\001\047\001" +
    "\050\001\051\131\001\002\000\014\002\ufffe\022\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\001\002\000\014\002\ufffd\022\ufffd" +
    "\047\132\050\133\051\131\001\002\000\004\002\000\001" +
    "\002\000\004\004\142\001\002\000\004\022\143\001\002" +
    "\000\040\002\uffe2\022\uffe2\027\uffe2\032\uffe2\034\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\001\002\000\012\027\145\032" +
    "\026\044\032\045\027\001\002\000\040\002\uffd7\022\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\020\002\005\003\024\004\007\005\017\007" +
    "\013\010\014\011\011\001\001\000\012\003\143\007\013" +
    "\010\035\011\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\136\003\024\004\007\005\017\007\013" +
    "\010\014\011\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\072\003\076\004\073" +
    "\005\075\007\042\010\074\011\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\054\007\013\010\035\011\011\001\001\000\012\003" +
    "\053\007\013\010\035\011\011\001\001\000\012\003\052" +
    "\007\013\010\035\011\011\001\001\000\012\003\051\007" +
    "\013\010\035\011\011\001\001\000\012\003\050\007\013" +
    "\010\035\011\011\001\001\000\012\003\047\007\013\010" +
    "\035\011\011\001\001\000\012\003\034\007\013\010\035" +
    "\011\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\040\007\042\010\041\011\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\061\007\013\010\035\011\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\071\007\013" +
    "\010\035\011\011\001\001\000\012\003\070\007\013\010" +
    "\035\011\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\126\005\017\001\001\000\006\004\125\005\017\001" +
    "\001\000\006\004\124\005\017\001\001\000\006\004\123" +
    "\005\017\001\001\000\006\004\122\005\017\001\001\000" +
    "\006\004\121\005\017\001\001\000\006\004\120\005\017" +
    "\001\001\000\006\004\117\005\017\001\001\000\002\001" +
    "\001\000\006\004\116\005\017\001\001\000\006\004\114" +
    "\005\017\001\001\000\006\004\115\005\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\135\003" +
    "\024\004\007\005\017\007\013\010\014\011\011\001\001" +
    "\000\020\002\134\003\024\004\007\005\017\007\013\010" +
    "\014\011\011\001\001\000\020\002\133\003\024\004\007" +
    "\005\017\007\013\010\014\011\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BoolExprParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BoolExprParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BoolExprParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BoolExprParser$actions {

 


  private final BoolExprParser parser;

  /** Constructor */
  CUP$BoolExprParser$actions(BoolExprParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$BoolExprParser$do_action(
    int                        CUP$BoolExprParser$act_num,
    java_cup.runtime.lr_parser CUP$BoolExprParser$parser,
    java.util.Stack            CUP$BoolExprParser$stack,
    int                        CUP$BoolExprParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BoolExprParser$result;

      /* select the action based on the action number */
      switch (CUP$BoolExprParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // set_magnitude ::= LPAREN set_magnitude RPAREN 
            {
              Integer RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Integer sm = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = sm; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_magnitude",3, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // set_magnitude ::= PIPE set_expr PIPE 
            {
              Integer RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Integer se = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = Utilities.getSetMagnitude(se); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_magnitude",3, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // int_expr ::= LPAREN int_expr RPAREN 
            {
              Integer RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Integer ie = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = ie; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("int_expr",2, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // int_expr ::= INTEGER 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = i; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("int_expr",2, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // int_expr ::= set_magnitude 
            {
              Integer RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer sm = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = sm; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("int_expr",2, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // int_expr ::= int_expr MODULUS int_expr 
            {
              Integer RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getModulus(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("int_expr",2, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // int_expr ::= int_expr MULTIPLY int_expr 
            {
              Integer RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getProduct(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("int_expr",2, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // int_expr ::= int_expr PLUS int_expr 
            {
              Integer RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getAddition(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("int_expr",2, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // int_expr ::= int_expr MINUS int_expr 
            {
              Integer RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getSubtraction(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("int_expr",2, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // empty_set ::= LPAREN empty_set RPAREN 
            {
              Integer RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Integer es = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = es; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("empty_set",7, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // empty_set ::= EMPTYSET 
            {
              Integer RESULT =null;
		 RESULT = Utilities.getEmptySet(); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("empty_set",7, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // singleton ::= LPAREN singleton RPAREN 
            {
              Integer RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int singright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Integer sing = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = sing; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("singleton",6, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // singleton ::= INIT LPAREN AGENT_IDENTIFIER RPAREN 
            {
              Integer RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = Utilities.getAgentInitSecret(ai); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("singleton",6, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-3)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // set_proper ::= LPAREN set_proper RPAREN 
            {
              Integer RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Integer sp = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = sp; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_proper",5, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // set_proper ::= FIN LPAREN AGENT_IDENTIFIER RPAREN 
            {
              Integer RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = Utilities.getFinalState(); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_proper",5, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-3)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // set_proper ::= SECRET LPAREN AGENT_IDENTIFIER RPAREN 
            {
              Integer RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = Utilities.getAgentSecret(ai, this.parser.currentSituation); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_proper",5, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-3)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // set_expr ::= LPAREN set_expr RPAREN 
            {
              Integer RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Integer se = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = se; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_expr",1, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // set_expr ::= empty_set 
            {
              Integer RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer es = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = es; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_expr",1, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // set_expr ::= singleton 
            {
              Integer RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int singright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer sing = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = sing; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_expr",1, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // set_expr ::= set_proper 
            {
              Integer RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer sp = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = sp; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_expr",1, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // set_expr ::= COMPLEMENT LPAREN set_expr RPAREN 
            {
              Integer RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Integer se = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = Utilities.getSetComplement(se); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_expr",1, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-3)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // set_expr ::= set_expr UNION set_expr 
            {
              Integer RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer se1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer se2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getSetUnion(se1, se2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_expr",1, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // set_expr ::= set_expr INTERSECTION set_expr 
            {
              Integer RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer se1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer se2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getSetIntersection(se1, se2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_expr",1, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // set_expr ::= set_expr MINUS set_expr 
            {
              Integer RESULT =null;
		int sm1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int sm1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer sm1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int sm2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int sm2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer sm2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getSetMinus(sm1, sm2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_expr",1, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_boolean_expr ::= LPAREN set_boolean_expr RPAREN 
            {
              Boolean RESULT =null;
		int sbeleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int sberight = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Boolean sbe = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		 RESULT = sbe; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // set_boolean_expr ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_boolean_expr ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_boolean_expr ::= int_expr NOTEQUAL int_expr 
            {
              Boolean RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isIntExprNotEqual(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_boolean_expr ::= int_expr DOUBLEEQUAL int_expr 
            {
              Boolean RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isIntExprEqual(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_boolean_expr ::= int_expr LESSTHANEQUAL int_expr 
            {
              Boolean RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isIntExprLessThanEqual(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set_boolean_expr ::= int_expr LESSTHAN int_expr 
            {
              Boolean RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isIntExprLessThan(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set_boolean_expr ::= int_expr GREATERTHANEQUAL int_expr 
            {
              Boolean RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isIntExprGreaterThanEqual(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // set_boolean_expr ::= int_expr GREATERTHAN int_expr 
            {
              Boolean RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer ie1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer ie2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isIntExprGreaterThan(ie1, ie2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // set_boolean_expr ::= set_expr NOTEQUAL set_expr 
            {
              Boolean RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer se1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer se2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isSetExprNotEqual(se1, se2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // set_boolean_expr ::= set_expr DOUBLEEQUAL set_expr 
            {
              Boolean RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer se1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer se2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isSetExprEqual(se1, se2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // set_boolean_expr ::= set_expr PROPERSUBSET set_expr 
            {
              Boolean RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer se1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer se2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isProperSubset(se1, se2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // set_boolean_expr ::= set_expr SUBSET set_expr 
            {
              Boolean RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer se1 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer se2 = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isSubset(se1, se2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // set_boolean_expr ::= singleton NOTSETELEMENT set_expr 
            {
              Boolean RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int singright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer sing = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer se = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isNotElementOf(sing, se); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // set_boolean_expr ::= singleton SETELEMENT set_expr 
            {
              Boolean RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int singright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Integer sing = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Integer se = (Integer)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.isElementOf(sing, se); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // set_boolean_expr ::= NOT set_boolean_expr 
            {
              Boolean RESULT =null;
		int sbeleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int sberight = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Boolean sbe = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getSetBoolNOT(sbe); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // set_boolean_expr ::= set_boolean_expr IMPLIES set_boolean_expr 
            {
              Boolean RESULT =null;
		int sbe1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int sbe1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Boolean sbe1 = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int sbe2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int sbe2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Boolean sbe2 = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getSetBoolImplication(sbe1, sbe2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // set_boolean_expr ::= set_boolean_expr OR set_boolean_expr 
            {
              Boolean RESULT =null;
		int sbe1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int sbe1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Boolean sbe1 = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int sbe2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int sbe2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Boolean sbe2 = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getSetBoolOROperator(sbe1, sbe2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= set_boolean_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).right;
		Boolean start_val = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)).value;
		RESULT = start_val;
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$BoolExprParser$parser.done_parsing();
          return CUP$BoolExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // set_boolean_expr ::= set_boolean_expr AND set_boolean_expr 
            {
              Boolean RESULT =null;
		int sbe1left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).left;
		int sbe1right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).right;
		Boolean sbe1 = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)).value;
		int sbe2left = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).left;
		int sbe2right = ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()).right;
		Boolean sbe2 = (Boolean)((java_cup.runtime.Symbol) CUP$BoolExprParser$stack.peek()).value;
		 RESULT = Utilities.getSetBoolANDOperator(sbe1, sbe2); 
              CUP$BoolExprParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",0, ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.elementAt(CUP$BoolExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$BoolExprParser$stack.peek()), RESULT);
            }
          return CUP$BoolExprParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

