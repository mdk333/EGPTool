
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 24 02:41:09 BST 2014
//----------------------------------------------------

package egp.concurrent.parsers;

import egp.FrameworkEntry;
import egp.concurrent.modeller.SituationBHive;
import egp.concurrent.util.Utilities;
import java.util.ArrayList;
import java.util.HashSet;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 24 02:41:09 BST 2014
  */
public class ProtocolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ProtocolParser() {super();}

  /** Constructor which sets the default scanner. */
  public ProtocolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ProtocolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  
   String callerOne; String callerTwo;
  public ProtocolParser(java_cup.runtime.Scanner s, String c1, String c2) {super(s); callerOne = c1; callerTwo = c2;}
  

SituationBHive currentSituation;
  ArrayList<SituationBHive> currentLayerList;
  public ProtocolParser(java_cup.runtime.Scanner s, SituationBHive situation, ArrayList<SituationBHive> currLayerList) {super(s); currentSituation = situation; currentLayerList = 
currLayerList;}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\023\002\000\002\024\002\000\002\002" +
    "\007\000\002\002\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\005\000\002\003\004\000\002\004\013\000" +
    "\002\005\010\000\002\005\010\000\002\005\005\000\002" +
    "\005\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\003\000\002\005\005" +
    "\000\002\015\005\000\002\015\003\000\002\016\005\000" +
    "\002\016\006\000\002\016\004\000\002\016\003\000\002" +
    "\025\002\000\002\016\006\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\005\000\002\012\006\000\002\012" +
    "\006\000\002\012\005\000\002\013\006\000\002\013\005" +
    "\000\002\014\003\000\002\014\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\005\000\002\011" +
    "\005\000\002\011\005\000\002\017\006\000\002\020\003" +
    "\000\002\020\004\000\002\021\006\000\002\022\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\022\005\001\002\000\004\002\261\001" +
    "\002\000\004\012\001\001\002\000\004\012\011\001\002" +
    "\000\004\023\000\001\002\000\010\023\ufffd\061\240\063" +
    "\237\001\002\000\004\004\012\001\002\000\004\011\013" +
    "\001\002\000\004\004\014\001\002\000\004\013\015\001" +
    "\002\000\004\031\016\001\002\000\034\004\043\005\037" +
    "\006\026\007\034\014\024\015\023\016\033\017\020\020" +
    "\041\021\040\025\030\033\017\056\022\001\002\000\014" +
    "\016\033\017\020\020\041\021\040\025\071\001\002\000" +
    "\004\025\231\001\002\000\014\024\ufff0\026\ufff0\053\166" +
    "\054\167\055\165\001\002\000\034\004\043\005\037\006" +
    "\026\007\034\014\024\015\023\016\033\017\020\020\041" +
    "\021\040\025\030\033\017\056\022\001\002\000\004\004" +
    "\175\001\002\000\004\004\175\001\002\000\026\034\141" +
    "\035\143\036\135\037\136\040\142\041\146\042\140\043" +
    "\144\044\147\045\137\001\002\000\016\024\uffd7\026\uffd7" +
    "\032\uffd7\053\uffd7\054\uffd7\055\uffd7\001\002\000\040\024" +
    "\uffce\026\uffce\032\uffce\033\uffce\036\uffce\040\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\001\002\000\034\004\043\005\037\006\026" +
    "\007\034\014\024\015\023\016\033\017\020\020\041\021" +
    "\040\025\030\033\017\056\022\001\002\000\040\024\uffd0" +
    "\026\uffd0\032\uffd0\033\uffd0\036\uffd0\040\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\001\002\000\026\036\uffcf\040\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\057\121\060\122" +
    "\001\002\000\004\025\116\001\002\000\016\024\uffd6\026" +
    "\uffd6\032\uffd6\053\uffd6\054\uffd6\055\uffd6\001\002\000\042" +
    "\024\uffc1\026\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\001\002\000\012\024\114\053" +
    "\051\054\052\055\050\001\002\000\042\024\uffc0\026\uffc0" +
    "\032\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\001\002\000\040\024\uffc7\026\uffc7\032\uffc7\033" +
    "\uffc7\036\uffc7\040\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\001\002\000" +
    "\004\025\111\001\002\000\022\036\060\040\065\045\063" +
    "\046\062\047\066\050\064\051\061\052\057\001\002\000" +
    "\006\010\044\056\045\001\002\000\034\004\043\005\037" +
    "\006\026\007\034\014\024\015\023\016\033\017\020\020" +
    "\041\021\040\025\030\033\017\056\022\001\002\000\004" +
    "\010\046\001\002\000\034\004\043\005\037\006\026\007" +
    "\034\014\024\015\023\016\033\017\020\020\041\021\040" +
    "\025\030\033\017\056\022\001\002\000\014\024\ufff5\026" +
    "\ufff5\053\051\054\052\055\050\001\002\000\034\004\043" +
    "\005\037\006\026\007\034\014\024\015\023\016\033\017" +
    "\020\020\041\021\040\025\030\033\017\056\022\001\002" +
    "\000\034\004\043\005\037\006\026\007\034\014\024\015" +
    "\023\016\033\017\020\020\041\021\040\025\030\033\017" +
    "\056\022\001\002\000\034\004\043\005\037\006\026\007" +
    "\034\014\024\015\023\016\033\017\020\020\041\021\040" +
    "\025\030\033\017\056\022\001\002\000\014\024\ufff4\026" +
    "\ufff4\053\ufff4\054\ufff4\055\050\001\002\000\014\024\ufff3" +
    "\026\ufff3\053\ufff3\054\ufff3\055\050\001\002\000\014\024" +
    "\ufff2\026\ufff2\053\ufff2\054\ufff2\055\ufff2\001\002\000\014" +
    "\024\ufff6\026\ufff6\053\051\054\052\055\050\001\002\000" +
    "\014\016\033\017\020\020\041\021\040\025\071\001\002" +
    "\000\014\016\033\017\020\020\041\021\040\025\071\001" +
    "\002\000\014\016\033\017\020\020\041\021\040\025\071" +
    "\001\002\000\014\016\033\017\020\020\041\021\040\025" +
    "\071\001\002\000\014\016\033\017\020\020\041\021\040" +
    "\025\071\001\002\000\014\016\033\017\020\020\041\021" +
    "\040\025\071\001\002\000\014\016\033\017\020\020\041" +
    "\021\040\025\071\001\002\000\014\016\033\017\020\020" +
    "\041\021\040\025\071\001\002\000\026\024\uffe0\026\uffe0" +
    "\032\uffe0\036\060\050\064\051\061\052\057\053\uffe0\054" +
    "\uffe0\055\uffe0\001\002\000\040\024\uffcf\026\uffcf\032\uffcf" +
    "\033\uffcf\036\uffcf\040\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\001\002" +
    "\000\014\016\033\017\020\020\041\021\040\025\071\001" +
    "\002\000\024\026\101\036\uffce\040\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\001\002\000\014\026" +
    "\100\036\060\050\064\051\061\052\057\001\002\000\014" +
    "\026\077\036\uffcf\050\uffcf\051\uffcf\052\uffcf\001\002\000" +
    "\024\026\076\036\uffd0\040\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\001\002\000\040\024\uffca\026" +
    "\uffca\032\uffca\033\uffca\036\uffca\040\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\001\002\000\044\024\uffc8\026\uffc8\032\uffc8\033\uffc8" +
    "\036\uffc8\040\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8" +
    "\001\002\000\040\024\uffcd\026\uffcd\032\uffcd\033\uffcd\036" +
    "\uffcd\040\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\001\002\000\040\024" +
    "\uffc6\026\uffc6\032\uffc6\033\uffc6\036\uffc6\040\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\001\002\000\026\024\uffdf\026\uffdf\032\uffdf" +
    "\036\060\050\064\051\061\052\057\053\uffdf\054\uffdf\055" +
    "\uffdf\001\002\000\040\024\uffd2\026\uffd2\032\uffd2\033\uffd2" +
    "\036\uffd2\040\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\001\002\000\026" +
    "\024\uffde\026\uffde\032\uffde\036\060\050\064\051\061\052" +
    "\057\053\uffde\054\uffde\055\uffde\001\002\000\026\024\uffe1" +
    "\026\uffe1\032\uffe1\036\060\050\064\051\061\052\057\053" +
    "\uffe1\054\uffe1\055\uffe1\001\002\000\040\024\uffd3\026\uffd3" +
    "\032\uffd3\033\uffd3\036\uffd3\040\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\001\002\000\040\024\uffd4\026\uffd4\032\uffd4\033\uffd4\036" +
    "\uffd4\040\uffd4\045\uffd4\046\uffd4\047\uffd4\050\064\051\061" +
    "\052\057\053\uffd4\054\uffd4\055\uffd4\001\002\000\040\024" +
    "\uffd1\026\uffd1\032\uffd1\033\uffd1\036\uffd1\040\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\064\051\061\052\057\053\uffd1\054" +
    "\uffd1\055\uffd1\001\002\000\004\004\112\001\002\000\004" +
    "\026\113\001\002\000\040\024\uffcb\026\uffcb\032\uffcb\033" +
    "\uffcb\036\uffcb\040\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\001\002\000" +
    "\004\032\115\001\002\000\010\023\ufff9\061\ufff9\063\ufff9" +
    "\001\002\000\004\004\117\001\002\000\004\026\120\001" +
    "\002\000\040\024\uffcc\026\uffcc\032\uffcc\033\uffcc\036\uffcc" +
    "\040\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\001\002\000\014\016\033" +
    "\017\020\020\041\021\040\025\071\001\002\000\014\016" +
    "\033\017\020\020\041\021\040\025\071\001\002\000\026" +
    "\024\uffe2\026\uffe2\032\uffe2\036\060\050\064\051\061\052" +
    "\057\053\uffe2\054\uffe2\055\uffe2\001\002\000\026\024\uffe3" +
    "\026\uffe3\032\uffe3\036\060\050\064\051\061\052\057\053" +
    "\uffe3\054\uffe3\055\uffe3\001\002\000\012\026\164\053\166" +
    "\054\167\055\165\001\002\000\030\026\145\034\141\035" +
    "\143\036\135\037\136\040\142\041\146\042\140\043\144" +
    "\044\147\045\137\001\002\000\030\026\077\036\uffcf\040" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\057\121\060\122\001\002\000\030\026\134\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\001\002\000\012\026\133\053\051\054" +
    "\052\055\050\001\002\000\024\026\100\036\060\040\065" +
    "\045\063\046\062\047\066\050\064\051\061\052\057\001" +
    "\002\000\014\024\uffef\026\uffef\053\uffef\054\uffef\055\uffef" +
    "\001\002\000\042\024\uffbd\026\uffbd\032\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\053\uffbd\054\uffbd\055\uffbd\001\002\000" +
    "\010\005\037\025\150\033\017\001\002\000\010\005\037" +
    "\025\150\033\017\001\002\000\010\005\037\025\150\033" +
    "\017\001\002\000\010\005\037\025\150\033\017\001\002" +
    "\000\010\005\037\025\150\033\017\001\002\000\010\005" +
    "\037\025\150\033\017\001\002\000\010\005\037\025\150" +
    "\033\017\001\002\000\010\005\037\025\150\033\017\001" +
    "\002\000\042\024\uffbf\026\uffbf\032\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\053\uffbf\054\uffbf\055\uffbf\001\002\000\010" +
    "\005\037\025\150\033\017\001\002\000\010\005\037\025" +
    "\150\033\017\001\002\000\010\005\037\025\150\033\017" +
    "\001\002\000\026\024\uffdc\026\uffdc\032\uffdc\034\141\035" +
    "\143\036\135\037\136\053\uffdc\054\uffdc\055\uffdc\001\002" +
    "\000\014\026\145\034\141\035\143\036\135\037\136\001" +
    "\002\000\026\024\uffdb\026\uffdb\032\uffdb\034\141\035\143" +
    "\036\135\037\136\053\uffdb\054\uffdb\055\uffdb\001\002\000" +
    "\026\024\uffdd\026\uffdd\032\uffdd\034\141\035\143\036\135" +
    "\037\136\053\uffdd\054\uffdd\055\uffdd\001\002\000\042\024" +
    "\uffc4\026\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\001\002\000\026\024\uffd9\026\uffd9" +
    "\032\uffd9\034\141\035\143\036\135\037\136\053\uffd9\054" +
    "\uffd9\055\uffd9\001\002\000\042\024\uffc3\026\uffc3\032\uffc3" +
    "\034\uffc3\035\143\036\135\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\001\002\000\026\024\uffda\026\uffda\032\uffda\034\141\035" +
    "\143\036\135\037\136\053\uffda\054\uffda\055\uffda\001\002" +
    "\000\026\024\uffd8\026\uffd8\032\uffd8\034\141\035\143\036" +
    "\135\037\136\053\uffd8\054\uffd8\055\uffd8\001\002\000\042" +
    "\024\uffc2\026\uffc2\032\uffc2\034\uffc2\035\143\036\135\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\001\002\000\042\024\uffc5\026" +
    "\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\001\002\000\016\024\uffd5\026\uffd5\032\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\001\002\000\024\005\037\006" +
    "\026\007\034\016\033\017\020\020\041\021\040\025\171" +
    "\033\017\001\002\000\024\005\037\006\026\007\034\016" +
    "\033\017\020\020\041\021\040\025\171\033\017\001\002" +
    "\000\024\005\037\006\026\007\034\016\033\017\020\020" +
    "\041\021\040\025\171\033\017\001\002\000\016\024\uffe5" +
    "\026\uffe5\032\uffe5\053\uffe5\054\uffe5\055\165\001\002\000" +
    "\024\005\037\006\026\007\034\016\033\017\020\020\041" +
    "\021\040\025\171\033\017\001\002\000\012\026\164\053" +
    "\166\054\167\055\165\001\002\000\016\024\uffe6\026\uffe6" +
    "\032\uffe6\053\uffe6\054\uffe6\055\165\001\002\000\016\024" +
    "\uffe4\026\uffe4\032\uffe4\053\uffe4\054\uffe4\055\uffe4\001\002" +
    "\000\006\027\uffed\030\uffed\001\002\000\006\027\200\030" +
    "\177\001\002\000\004\004\222\001\002\000\004\031\201" +
    "\001\002\000\030\004\206\005\037\006\026\007\034\016" +
    "\033\017\020\020\041\021\040\025\204\033\017\056\203" +
    "\001\002\000\014\026\uffe9\032\uffe9\053\166\054\167\055" +
    "\165\001\002\000\030\004\206\005\037\006\026\007\034" +
    "\016\033\017\020\020\041\021\040\025\204\033\017\056" +
    "\203\001\002\000\030\004\206\005\037\006\026\007\034" +
    "\016\033\017\020\020\041\021\040\025\204\033\017\056" +
    "\203\001\002\000\004\032\214\001\002\000\006\010\207" +
    "\056\210\001\002\000\030\004\206\005\037\006\026\007" +
    "\034\016\033\017\020\020\041\021\040\025\204\033\017" +
    "\056\203\001\002\000\004\010\211\001\002\000\030\004" +
    "\206\005\037\006\026\007\034\016\033\017\020\020\041" +
    "\021\040\025\204\033\017\056\203\001\002\000\006\026" +
    "\uffeb\032\uffeb\001\002\000\006\026\uffec\032\uffec\001\002" +
    "\000\014\024\ufff8\026\ufff8\053\ufff8\054\ufff8\055\ufff8\001" +
    "\002\000\012\026\164\053\166\054\167\055\165\001\002" +
    "\000\004\026\uffe8\001\002\000\004\026\220\001\002\000" +
    "\006\026\uffe7\032\uffe7\001\002\000\006\026\uffea\032\uffea" +
    "\001\002\000\006\027\uffee\030\uffee\001\002\000\006\027" +
    "\224\030\177\001\002\000\004\031\225\001\002\000\030" +
    "\004\206\005\037\006\026\007\034\016\033\017\020\020" +
    "\041\021\040\025\204\033\017\056\203\001\002\000\004" +
    "\032\227\001\002\000\014\024\ufff7\026\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\001\002\000\014\024\ufff1\026\ufff1\053\051" +
    "\054\052\055\050\001\002\000\004\004\232\001\002\000" +
    "\004\026\233\001\002\000\044\024\uffc9\026\uffc9\032\uffc9" +
    "\033\uffc9\036\uffc9\040\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9" +
    "\060\uffc9\001\002\000\014\033\235\036\060\050\064\051" +
    "\061\052\057\001\002\000\042\024\uffbe\026\uffbe\032\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\001\002\000\004\023\ufffa\001\002\000\004\064\254\001" +
    "\002\000\004\031\243\001\002\000\006\023\ufffc\063\237" +
    "\001\002\000\004\023\ufffb\001\002\000\004\004\245\001" +
    "\002\000\006\004\245\032\uffbb\001\002\000\004\062\250" +
    "\001\002\000\004\032\247\001\002\000\006\023\uffbc\063" +
    "\uffbc\001\002\000\004\004\251\001\002\000\004\024\252" +
    "\001\002\000\006\004\uffb9\032\uffb9\001\002\000\004\032" +
    "\uffba\001\002\000\004\005\255\001\002\000\004\024\256" +
    "\001\002\000\004\023\uffb8\001\002\000\004\023\260\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\023\005\001\001\000\006\003\006\004\007\001\001" +
    "\000\004\024\256\001\001\000\006\017\240\022\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\035\006" +
    "\020\007\041\010\024\011\034\012\030\013\031\014\026" +
    "\001\001\000\012\007\233\012\030\013\067\014\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\227" +
    "\006\020\007\041\010\024\011\034\012\030\013\031\014" +
    "\026\001\001\000\004\015\222\001\001\000\004\015\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\130\006\124\007\131\010\125\011\127" +
    "\012\074\013\126\014\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\055\006\020\007\041\010\024\011\034\012" +
    "\030\013\031\014\026\001\001\000\002\001\001\000\022" +
    "\005\046\006\020\007\041\010\024\011\034\012\030\013" +
    "\031\014\026\001\001\000\002\001\001\000\022\005\054" +
    "\006\020\007\041\010\024\011\034\012\030\013\031\014" +
    "\026\001\001\000\022\005\053\006\020\007\041\010\024" +
    "\011\034\012\030\013\031\014\026\001\001\000\022\005" +
    "\052\006\020\007\041\010\024\011\034\012\030\013\031" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\107\012\030" +
    "\013\067\014\026\001\001\000\012\007\106\012\030\013" +
    "\067\014\026\001\001\000\012\007\105\012\030\013\067" +
    "\014\026\001\001\000\012\007\104\012\030\013\067\014" +
    "\026\001\001\000\012\007\103\012\030\013\067\014\026" +
    "\001\001\000\012\007\102\012\030\013\067\014\026\001" +
    "\001\000\012\007\101\012\030\013\067\014\026\001\001" +
    "\000\012\007\066\012\030\013\067\014\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\072\012\074" +
    "\013\073\014\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\123\012\030" +
    "\013\067\014\026\001\001\000\012\007\122\012\030\013" +
    "\067\014\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\162\011\034\001" +
    "\001\000\006\010\161\011\034\001\001\000\006\010\160" +
    "\011\034\001\001\000\006\010\157\011\034\001\001\000" +
    "\006\010\156\011\034\001\001\000\006\010\155\011\034" +
    "\001\001\000\006\010\154\011\034\001\001\000\006\010" +
    "\153\011\034\001\001\000\002\001\001\000\006\010\152" +
    "\011\034\001\001\000\006\010\150\011\034\001\001\000" +
    "\006\010\151\011\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\173\007\041\010\024\011\034" +
    "\012\030\013\031\014\026\001\001\000\020\006\172\007" +
    "\041\010\024\011\034\012\030\013\031\014\026\001\001" +
    "\000\020\006\167\007\041\010\024\011\034\012\030\013" +
    "\031\014\026\001\001\000\002\001\001\000\020\006\171" +
    "\007\131\010\125\011\127\012\074\013\126\014\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\201\007\041\010\024\011\034" +
    "\012\030\013\031\014\026\016\204\001\001\000\002\001" +
    "\001\000\022\006\201\007\041\010\024\011\034\012\030" +
    "\013\031\014\026\016\220\001\001\000\022\006\214\007" +
    "\131\010\125\011\127\012\074\013\126\014\071\016\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\201\007\041\010\024\011\034\012\030\013\031\014\026" +
    "\016\212\001\001\000\002\001\001\000\022\006\201\007" +
    "\041\010\024\011\034\012\030\013\031\014\026\016\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\201" +
    "\007\041\010\024\011\034\012\030\013\031\014\026\016" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\241\001" +
    "\001\000\002\001\001\000\006\020\245\021\243\001\001" +
    "\000\006\020\252\021\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ProtocolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ProtocolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ProtocolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ProtocolParser$actions {

 
/* When we say  "let a call b" we refer to these two caller respectively */
/* both caller one and caller two are fixed for each invocation of this parser (they are fixed because they are not varied in the expansion of 
*  'conjuct' and 'disjunct' expressions */
/* they are the "i,j" pair from the nested loop that gave rise to this call.*/

/*
    String callerOne;
    String callerTwo;
    

    public void setCallers(String caller1, String caller2){
        callerOne = caller1;
        callerTwo = caller2;
    }

    public String getCallerOne(){
        return this.callerOne;
    }

    public String getCallerTwo(){
        return this.callerTwo;
    }

*/
Utilities utilities = new Utilities();
String neighList = "";
HashSet<String> topologyAgents = new HashSet<>();

  private final ProtocolParser parser;

  /** Constructor */
  CUP$ProtocolParser$actions(ProtocolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ProtocolParser$do_action(
    int                        CUP$ProtocolParser$act_num,
    java_cup.runtime.lr_parser CUP$ProtocolParser$parser,
    java.util.Stack            CUP$ProtocolParser$stack,
    int                        CUP$ProtocolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ProtocolParser$result;

      /* select the action based on the action number */
      switch (CUP$ProtocolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // equivalence_notion ::= EQUIV_NOTION ASSIGNMENT INTEGER SEMI 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		Integer eq = (Integer)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 FrameworkEntry.equivalenceNotion = eq; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("equivalence_notion",16, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // neighbourhood_state ::= AGENT_IDENTIFIER NEIGHBOUR AGENT_IDENTIFIER SEMI 
            {
              String RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).value;
		int aiileft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int aiiright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String aii = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 neighList = neighList.concat("(" + ai + "," + aii + ")" + ":"); 
                                                                                   neighList = neighList.concat("(" + aii + "," + ai + ")" + ":");
                                                                                   topologyAgents.add(ai);
                                                                                   topologyAgents.add(aii);
                                                                                
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("neighbourhood_state",15, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // neighbourhood_list ::= neighbourhood_state neighbourhood_list 
            {
              Object RESULT =null;

              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("neighbourhood_list",14, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // neighbourhood_list ::= neighbourhood_state 
            {
              Object RESULT =null;

              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("neighbourhood_list",14, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // topology_def ::= TOPOLOGY LBRACE neighbourhood_list RBRACE 
            {
              Object RESULT =null;

              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("topology_def",13, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // set_magnitude ::= LPAREN set_magnitude RPAREN 
            {
              String RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "(" + sm + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_magnitude",7, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // set_magnitude ::= PIPE set_expr PIPE 
            {
              String RESULT =null;
		int seStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int seStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String seStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "|" + seStr + "|"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_magnitude",7, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // int_expr ::= LPAREN int_expr RPAREN 
            {
              String RESULT =null;
		int intStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int intStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String intStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "(" + intStr + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("int_expr",6, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // int_expr ::= INTEGER 
            {
              String RESULT =null;
		int integleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int integright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		Integer integ = (Integer)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = integ + ""; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("int_expr",6, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // int_expr ::= set_magnitude 
            {
              String RESULT =null;
		int setMagStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int setMagStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String setMagStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = setMagStr; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("int_expr",6, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // int_expr ::= int_expr MODULUS int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + "%" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("int_expr",6, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // int_expr ::= int_expr MULTIPLY int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + "*" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("int_expr",6, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // int_expr ::= int_expr PLUS int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + "+" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("int_expr",6, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // int_expr ::= int_expr MINUS int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + "-" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("int_expr",6, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // empty_set ::= LPAREN empty_set RPAREN 
            {
              String RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String es = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "(" + es + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("empty_set",10, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // empty_set ::= EMPTYSET 
            {
              String RESULT =null;
		 RESULT = "empty" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("empty_set",10, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // singleton ::= LPAREN singleton RPAREN 
            {
              String RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int singright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String sing = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "(" + sing + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("singleton",9, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // singleton ::= INIT LPAREN AGENT_IDENTIFIER RPAREN 
            {
              String RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "init(" +  "[" + agentId + "]" + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("singleton",9, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // set_proper ::= LPAREN set_proper RPAREN 
            {
              String RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String sp = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "(" + sp + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_proper",8, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // set_proper ::= FIN LPAREN AGENT_IDENTIFIER RPAREN 
            {
              String RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "fin(" + "[" + agentId + "]" + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_proper",8, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // set_proper ::= SECRET LPAREN AGENT_IDENTIFIER RPAREN 
            {
              String RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "secret(" + "[" + agentId + "]" + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_proper",8, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // set_expr ::= LPAREN set_expr RPAREN 
            {
              String RESULT =null;
		int seExprStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int seExprStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String seExprStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "(" + seExprStr + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // set_expr ::= empty_set 
            {
              String RESULT =null;
		int empStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int empStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String empStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = empStr; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // set_expr ::= singleton 
            {
              String RESULT =null;
		int sinStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int sinStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String sinStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = sinStr; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // set_expr ::= set_proper 
            {
              String RESULT =null;
		int setpropStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int setpropStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String setpropStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = setpropStr; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // set_expr ::= set_expr COMPLEMENT set_expr 
            {
              String RESULT =null;
		int seStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int seStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String seStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seStr1 + "\\complement" + seStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // set_expr ::= set_expr UNION set_expr 
            {
              String RESULT =null;
		int seStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int seStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String seStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seStr1 + "\\cup" + seStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // set_expr ::= set_expr INTERSECTION set_expr 
            {
              String RESULT =null;
		int seStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int seStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String seStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seStr1 + "\\cap" + seStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // set_expr ::= set_expr MINUS set_expr 
            {
              String RESULT =null;
		int seStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int seStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String seStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seStr1 + "-" + seStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // set_boolean_expr ::= LPAREN set_boolean_expr RPAREN 
            {
              String RESULT =null;
		int beStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int beStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String beStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "(" + beStr + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // set_boolean_expr ::= FALSE 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // set_boolean_expr ::= TRUE 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // set_boolean_expr ::= int_expr NOTEQUAL int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + "!=" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // set_boolean_expr ::= int_expr DOUBLEEQUAL int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + "==" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // set_boolean_expr ::= int_expr LESSTHANEQUAL int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + "<=" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // set_boolean_expr ::= int_expr LESSTHAN int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + "<" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // set_boolean_expr ::= int_expr GREATERTHANEQUAL int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + ">=" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // set_boolean_expr ::= int_expr GREATERTHAN int_expr 
            {
              String RESULT =null;
		int intStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int intStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String intStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int intStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int intStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String intStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + intStr1 + ">" + intStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // set_boolean_expr ::= set_expr NOTEQUAL set_expr 
            {
              String RESULT =null;
		int seStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int seStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String seStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seStr1 + "!=" + seStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // set_boolean_expr ::= set_expr DOUBLEEQUAL set_expr 
            {
              String RESULT =null;
		int seStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int seStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String seStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seStr1 + "==" + seStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // set_boolean_expr ::= set_expr PROPERSUBSET set_expr 
            {
              String RESULT =null;
		int seStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int seStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String seStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seStr1 + "\\subseteq" + seStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // set_boolean_expr ::= set_expr SUBSET set_expr 
            {
              String RESULT =null;
		int seStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int seStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String seStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seStr1 + "\\subset" + seStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // set_boolean_expr ::= singleton NOTSETELEMENT set_expr 
            {
              String RESULT =null;
		int sinStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int sinStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String sinStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + sinStr + "\\notin" + seStr + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // set_boolean_expr ::= singleton SETELEMENT set_expr 
            {
              String RESULT =null;
		int sinStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int sinStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String sinStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int seStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + sinStr + "\\in" + seStr + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // set_boolean_expr ::= set_boolean_expr IMPLIES set_boolean_expr 
            {
              String RESULT =null;
		int beExprStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int beExprStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String beExprStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int beExprStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int beExprStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String beExprStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + beExprStr1 + "->" + beExprStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // set_boolean_expr ::= set_boolean_expr OR set_boolean_expr 
            {
              String RESULT =null;
		int beExprStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int beExprStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String beExprStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int beExprStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int beExprStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String beExprStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + beExprStr1 + "||" + beExprStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // set_boolean_expr ::= set_boolean_expr AND set_boolean_expr 
            {
              String RESULT =null;
		int beExprStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int beExprStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String beExprStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int beExprStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int beExprStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String beExprStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + beExprStr1 + "&&" + beExprStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",4, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition_expr_exp ::= LPAREN condition_expr_exp NT$2 RPAREN 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		int cExprStringleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int cExprStringright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String cExprString = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;

              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr_exp",12, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              String RESULT =null;
		int cExprStringleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int cExprStringright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String cExprString = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
 RESULT = "(" + cExprString + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condition_expr_exp ::= set_boolean_expr 
            {
              String RESULT =null;
		int setAlgStringleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int setAlgStringright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String setAlgString = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + setAlgString + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr_exp",12, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condition_expr_exp ::= NOT condition_expr_exp 
            {
              String RESULT =null;
		int cExprStringleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int cExprStringright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String cExprString = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "\\neg (" + cExprString + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr_exp",12, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condition_expr_exp ::= AGENT_IDENTIFIER NOT KNOWS condition_expr_exp 
            {
              String RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).value;
		int cExprStringleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int cExprStringright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String cExprString = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "[" + agentId + "]" + " \\neg knows (" + cExprString + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr_exp",12, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condition_expr_exp ::= AGENT_IDENTIFIER KNOWS condition_expr_exp 
            {
              String RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int cExprStringleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int cExprStringright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String cExprString = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "[" + agentId + "]" + " knows (" + cExprString + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr_exp",12, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // agent_identifier_list ::= AGENT_IDENTIFIER 
            {
              String RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "[" + agentId + "]"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("agent_identifier_list",11, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // agent_identifier_list ::= agent_identifier_list COMMA AGENT_IDENTIFIER 
            {
              String RESULT =null;
		int agIdListleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int agIdListright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String agIdList = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = agIdList + "," + "[" + agentId + "]"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("agent_identifier_list",11, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condition_expr ::= LPAREN condition_expr RPAREN 
            {
              String RESULT =null;
		int conExprStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int conExprStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String conExprStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = "(" + conExprStr + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condition_expr ::= set_boolean_expr 
            {
              String RESULT =null;
		int seAlgStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int seAlgStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String seAlgStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + seAlgStr + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condition_expr ::= NOT condition_expr 
            {
              String RESULT =null;
		int conExprStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int conExprStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String conExprStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "\\neg(" + conExprStr + ")" ; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condition_expr ::= condition_expr IMPLIES condition_expr 
            {
              String RESULT =null;
		int conExprStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int conExprStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String conExprStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int conExprStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int conExprStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String conExprStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + conExprStr1 + "->" + conExprStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condition_expr ::= condition_expr AND condition_expr 
            {
              String RESULT =null;
		int conExprStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int conExprStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String conExprStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int conExprStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int conExprStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String conExprStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + conExprStr1 + "&&" + conExprStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condition_expr ::= condition_expr OR condition_expr 
            {
              String RESULT =null;
		int conExprStr1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int conExprStr1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String conExprStr1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int conExprStr2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int conExprStr2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String conExprStr2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "(" + conExprStr1 + "||" + conExprStr2 + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // condition_expr ::= AGENT_IDENTIFIER NOT KNOWS condition_expr 
            {
              String RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)).value;
		int conExprStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int conExprStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String conExprStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "[" + agentId + "]" + " \\neg knows(" + conExprStr + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-3)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // condition_expr ::= AGENT_IDENTIFIER KNOWS condition_expr 
            {
              String RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		int conExprStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int conExprStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String conExprStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = "[" + agentId + "]" + " knows(" + conExprStr + ")"; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // condition_expr ::= CONJUNCT agent_identifier_list COLON LBRACE condition_expr_exp RBRACE 
            {
              String RESULT =null;
		int agIdListStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-4)).left;
		int agIdListStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-4)).right;
		String agIdListStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-4)).value;
		int conExprStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int conExprStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String conExprStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 
                        RESULT = utilities.expandConjunct(agIdListStr, conExprStr); 
                    
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-5)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // condition_expr ::= DISJUNCT agent_identifier_list COLON LBRACE condition_expr_exp RBRACE 
            {
              String RESULT =null;
		int agIdListStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-4)).left;
		int agIdListStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-4)).right;
		String agIdListStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-4)).value;
		int conExprStrleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int conExprStrright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String conExprStr = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 
                        //we'll expand the expression, leaving the place holders for "a" and "b" intact since they are constant
                        //we'll replace them at the point we are about  to evaluate the expanded condition expression

                        RESULT = utilities.expandDisjunct(agIdListStr, conExprStr); 
                    
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("condition_expr",3, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-5)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // call_condition ::= LET AGENT_IDENTIFIER CALL AGENT_IDENTIFIER IF LBRACE condition_expr SEMI RBRACE 
            {
              String RESULT =null;
		int agentId1left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-7)).left;
		int agentId1right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-7)).right;
		String agentId1 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-7)).value;
		int agentId2left = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-5)).left;
		int agentId2right = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-5)).right;
		String agentId2 = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-5)).value;
		int conExprStringleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int conExprStringright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String conExprString = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		
                        // Here call the conditional expression parser to parse the string and return true or false
                        RESULT = utilities.evaluateCallCondition(agentId1, agentId2, conExprString, this.parser.callerOne, this.parser.callerTwo);
                    
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("call_condition",2, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-8)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // protocol_spec ::= call_condition equivalence_notion 
            {
              String RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		 RESULT = cc; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("protocol_spec",1, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // protocol_spec ::= call_condition topology_def equivalence_notion 
            {
              String RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;
		 RESULT = cc; FrameworkEntry.topology = neighList; 
                                                                      FrameworkEntry.topologyAgents = topologyAgents; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("protocol_spec",1, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // protocol_spec ::= call_condition topology_def 
            {
              String RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		int topleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int topright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		Object top = (Object)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = cc; FrameworkEntry.topology = neighList; 
                                                                      FrameworkEntry.topologyAgents = topologyAgents; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("protocol_spec",1, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // protocol_spec ::= call_condition 
            {
              String RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;
		 RESULT = cc; 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("protocol_spec",1, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= specification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		RESULT = start_val;
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ProtocolParser$parser.done_parsing();
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= BEGIN NT$0 protocol_spec NT$1 END 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-2)).value;

              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("specification",0, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-4)), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.elementAt(CUP$ProtocolParser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$ProtocolParser$stack.peek()).value;

 // Here write what you will do once you have read in all the codes
RESULT = ps;

              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              String RESULT =null;
 System.out.println("found BEGIN  from parser ===> !"); 
              CUP$ProtocolParser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtocolParser$stack.peek()), RESULT);
            }
          return CUP$ProtocolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

