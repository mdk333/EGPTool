
/**
 *
 * @author Maduka Attamah
 *
 * Copyright 2011-2015 Maduka Attamah
 *
 */

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 22 18:42:52 BST 2014
//----------------------------------------------------

package egp.concurrent.parsers;

import egp.concurrent.modeller.SituationBHive;
import egp.concurrent.util.Utilities;
import java.util.ArrayList;
import java.util.HashSet;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 22 18:42:52 BST 2014
  */
public class ExpCCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ExpCCParser() {super();}

  /** Constructor which sets the default scanner. */
  public ExpCCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExpCCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  
  SituationBHive currentSituation;
  ArrayList<SituationBHive> currentLayerList;
  //ArrayList<SituationBHive> TT = new ArrayList<>();
  //Now Initialise the truthset TT with the currentSituation, that is, that for which the formula is being checked
  Utilities utilities;
  public ExpCCParser(java_cup.runtime.Scanner s, SituationBHive situation) {super(s); currentSituation = situation; utilities = new Utilities(currentSituation);}
  

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\005\000\002\002\004\000\002\002" +
    "\006\000\002\013\002\000\002\002\006\000\002\014\002" +
    "\000\002\002\007\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\004\000\002\002\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\006\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\005\000\002\010\006\000\002\010\006\000\002\010" +
    "\005\000\002\011\006\000\002\011\005\000\002\012\003" +
    "\000\002\012\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\006\005\000\002\006" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\010\004\006\021\007\052\004\001\002\000" +
    "\010\004\006\021\007\052\004\001\002\000\012\002\171" +
    "\047\013\050\014\051\012\001\002\000\006\011\020\052" +
    "\021\001\002\000\010\004\006\021\007\052\004\001\002" +
    "\000\012\022\011\047\013\050\014\051\012\001\002\000" +
    "\014\002\ufff6\022\ufff6\047\ufff6\050\ufff6\051\ufff6\001\002" +
    "\000\010\004\006\021\007\052\004\001\002\000\010\004" +
    "\006\021\007\052\004\001\002\000\010\004\006\021\007" +
    "\052\004\001\002\000\014\002\ufffa\022\ufffa\047\ufffa\050" +
    "\ufffa\051\012\001\002\000\014\002\ufff9\022\ufff9\047\ufff9" +
    "\050\ufff9\051\012\001\002\000\014\002\ufff8\022\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\001\002\000\032\004\ufffe\005\041" +
    "\006\031\007\037\012\036\013\024\014\044\015\043\021" +
    "\033\027\023\046\042\052\026\001\002\000\004\011\022" +
    "\001\002\000\032\004\ufffc\005\041\006\031\007\037\012" +
    "\036\013\024\014\044\015\043\021\033\027\023\046\042" +
    "\052\026\001\002\000\016\012\036\013\024\014\044\015" +
    "\043\021\057\046\042\001\002\000\004\021\161\001\002" +
    "\000\014\002\uffff\022\uffff\047\152\050\153\051\151\001" +
    "\002\000\030\005\041\006\031\007\037\012\036\013\024" +
    "\014\044\015\043\021\033\027\023\046\042\052\026\001" +
    "\002\000\010\004\006\021\007\052\004\001\002\000\026" +
    "\030\125\031\127\032\121\033\122\034\126\035\133\036" +
    "\124\037\130\040\132\041\123\001\002\000\014\002\uffe5" +
    "\022\uffe5\047\uffe5\050\uffe5\051\uffe5\001\002\000\034\002" +
    "\uffdc\022\uffdc\027\uffdc\032\uffdc\034\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc\001" +
    "\002\000\030\005\041\006\031\007\037\012\036\013\024" +
    "\014\044\015\043\021\033\027\023\046\042\052\026\001" +
    "\002\000\034\002\uffde\022\uffde\027\uffde\032\uffde\034\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\047\uffde\050" +
    "\uffde\051\uffde\001\002\000\024\032\uffdd\034\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\053\107\054\110\001" +
    "\002\000\004\021\104\001\002\000\014\002\uffe4\022\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\001\002\000\040\002\uffcf\022" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\040\002\uffce\022\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\047\uffce\050\uffce\051\uffce\001\002\000\004" +
    "\021\101\001\002\000\034\002\uffd5\022\uffd5\027\uffd5\032" +
    "\uffd5\034\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\001\002\000\004\021\076\001" +
    "\002\000\020\032\046\034\053\041\051\042\050\043\054" +
    "\044\052\045\047\001\002\000\016\012\036\013\024\014" +
    "\044\015\043\021\057\046\042\001\002\000\016\012\036" +
    "\013\024\014\044\015\043\021\057\046\042\001\002\000" +
    "\016\012\036\013\024\014\044\015\043\021\057\046\042" +
    "\001\002\000\016\012\036\013\024\014\044\015\043\021" +
    "\057\046\042\001\002\000\016\012\036\013\024\014\044" +
    "\015\043\021\057\046\042\001\002\000\016\012\036\013" +
    "\024\014\044\015\043\021\057\046\042\001\002\000\016" +
    "\012\036\013\024\014\044\015\043\021\057\046\042\001" +
    "\002\000\022\002\uffee\022\uffee\032\046\044\052\045\047" +
    "\047\uffee\050\uffee\051\uffee\001\002\000\034\002\uffdd\022" +
    "\uffdd\027\uffdd\032\uffdd\034\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000" +
    "\016\012\036\013\024\014\044\015\043\021\057\046\042" +
    "\001\002\000\022\022\067\032\uffdc\034\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\001\002\000\012\022\066" +
    "\032\046\044\052\045\047\001\002\000\012\022\065\032" +
    "\uffdd\044\uffdd\045\uffdd\001\002\000\022\022\064\032\uffde" +
    "\034\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\001" +
    "\002\000\034\002\uffd8\022\uffd8\027\uffd8\032\uffd8\034\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\001\002\000\040\002\uffd6\022\uffd6\027\uffd6" +
    "\032\uffd6\034\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\053\uffd6\054\uffd6\001\002" +
    "\000\034\002\uffdb\022\uffdb\027\uffdb\032\uffdb\034\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\001\002\000\034\002\uffd4\022\uffd4\027\uffd4\032" +
    "\uffd4\034\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\001\002\000\022\002\uffed\022" +
    "\uffed\032\046\044\052\045\047\047\uffed\050\uffed\051\uffed" +
    "\001\002\000\034\002\uffe0\022\uffe0\027\uffe0\032\uffe0\034" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\001\002\000\022\002\uffec\022\uffec\032" +
    "\046\044\052\045\047\047\uffec\050\uffec\051\uffec\001\002" +
    "\000\022\002\uffef\022\uffef\032\046\044\052\045\047\047" +
    "\uffef\050\uffef\051\uffef\001\002\000\034\002\uffe1\022\uffe1" +
    "\027\uffe1\032\uffe1\034\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\047\uffe1\050\uffe1\051\uffe1\001\002\000\034" +
    "\002\uffe2\022\uffe2\027\uffe2\032\uffe2\034\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\052\045\047\047\uffe2\050\uffe2\051\uffe2" +
    "\001\002\000\004\004\077\001\002\000\004\022\100\001" +
    "\002\000\034\002\uffd9\022\uffd9\027\uffd9\032\uffd9\034\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\001\002\000\016\012\036\013\024\014\044" +
    "\015\043\021\057\046\042\001\002\000\012\022\103\032" +
    "\046\044\052\045\047\001\002\000\034\002\uffdf\022\uffdf" +
    "\027\uffdf\032\uffdf\034\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002\000\004" +
    "\004\105\001\002\000\004\022\106\001\002\000\034\002" +
    "\uffda\022\uffda\027\uffda\032\uffda\034\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\047\uffda\050\uffda\051\uffda\001" +
    "\002\000\016\012\036\013\024\014\044\015\043\021\057" +
    "\046\042\001\002\000\016\012\036\013\024\014\044\015" +
    "\043\021\057\046\042\001\002\000\022\002\ufff0\022\ufff0" +
    "\032\046\044\052\045\047\047\ufff0\050\ufff0\051\ufff0\001" +
    "\002\000\022\002\ufff1\022\ufff1\032\046\044\052\045\047" +
    "\047\ufff1\050\ufff1\051\ufff1\001\002\000\012\022\150\047" +
    "\152\050\153\051\151\001\002\000\030\022\131\030\125" +
    "\031\127\032\121\033\122\034\126\035\133\036\124\037" +
    "\130\040\132\041\123\001\002\000\026\022\065\032\uffdd" +
    "\034\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\053" +
    "\107\054\110\001\002\000\030\022\120\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\001\002\000\022\022\066\032\046\034\053" +
    "\041\051\042\050\043\054\044\052\045\047\001\002\000" +
    "\040\002\uffcb\022\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\001\002\000\010\005\041\021\134" +
    "\027\023\001\002\000\010\005\041\021\134\027\023\001" +
    "\002\000\010\005\041\021\134\027\023\001\002\000\010" +
    "\005\041\021\134\027\023\001\002\000\010\005\041\021" +
    "\134\027\023\001\002\000\010\005\041\021\134\027\023" +
    "\001\002\000\010\005\041\021\134\027\023\001\002\000" +
    "\010\005\041\021\134\027\023\001\002\000\040\002\uffcd" +
    "\022\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\001\002\000\010\005\041\021\134\027\023\001" +
    "\002\000\010\005\041\021\134\027\023\001\002\000\010" +
    "\005\041\021\134\027\023\001\002\000\024\002\uffe9\022" +
    "\uffe9\030\125\031\127\032\121\033\122\047\uffe9\050\uffe9" +
    "\051\uffe9\001\002\000\014\022\131\030\125\031\127\032" +
    "\121\033\122\001\002\000\024\002\uffea\022\uffea\030\125" +
    "\031\127\032\121\033\122\047\uffea\050\uffea\051\uffea\001" +
    "\002\000\024\002\uffeb\022\uffeb\030\125\031\127\032\121" +
    "\033\122\047\uffeb\050\uffeb\051\uffeb\001\002\000\040\002" +
    "\uffd2\022\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\001\002\000\024\002\uffe7\022\uffe7\030\125" +
    "\031\127\032\121\033\122\047\uffe7\050\uffe7\051\uffe7\001" +
    "\002\000\040\002\uffd1\022\uffd1\030\uffd1\031\127\032\121" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002\000\024\002\uffe8" +
    "\022\uffe8\030\125\031\127\032\121\033\122\047\uffe8\050" +
    "\uffe8\051\uffe8\001\002\000\024\002\uffe6\022\uffe6\030\125" +
    "\031\127\032\121\033\122\047\uffe6\050\uffe6\051\uffe6\001" +
    "\002\000\040\002\uffd0\022\uffd0\030\uffd0\031\127\032\121" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000\040\002\uffd3" +
    "\022\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\001\002\000\014\002\uffe3\022\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\001\002\000\030\005\041\006\031\007\037" +
    "\012\036\013\024\014\044\015\043\021\033\027\023\046" +
    "\042\052\026\001\002\000\030\005\041\006\031\007\037" +
    "\012\036\013\024\014\044\015\043\021\033\027\023\046" +
    "\042\052\026\001\002\000\030\005\041\006\031\007\037" +
    "\012\036\013\024\014\044\015\043\021\033\027\023\046" +
    "\042\052\026\001\002\000\014\002\ufff4\022\ufff4\047\ufff4" +
    "\050\ufff4\051\151\001\002\000\014\002\ufff5\022\ufff5\047" +
    "\ufff5\050\ufff5\051\151\001\002\000\014\002\ufff3\022\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\001\002\000\014\002\ufffb\022" +
    "\ufffb\047\013\050\014\051\012\001\002\000\014\002\ufff2" +
    "\022\ufff2\047\152\050\153\051\151\001\002\000\004\004" +
    "\162\001\002\000\004\022\163\001\002\000\040\002\uffd7" +
    "\022\uffd7\027\uffd7\032\uffd7\034\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7" +
    "\054\uffd7\001\002\000\012\027\165\032\046\044\052\045" +
    "\047\001\002\000\040\002\uffcc\022\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\047\uffcc\050\uffcc\051\uffcc\001\002\000\014" +
    "\002\001\022\001\047\152\050\153\051\151\001\002\000" +
    "\010\004\006\021\007\052\004\001\002\000\014\002\ufffd" +
    "\022\ufffd\047\013\050\014\051\012\001\002\000\004\002" +
    "\000\001\002\000\014\002\ufff7\022\ufff7\047\013\050\014" +
    "\051\012\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\002\004\001\001\000\004\002\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\016\001\001\000\004\002\015\001\001\000\004\002\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\165\004\044\005\027\006\037\010\033" +
    "\011\034\012\031\013\166\001\001\000\002\001\001\000" +
    "\022\003\024\004\044\005\027\006\037\010\033\011\034" +
    "\012\031\014\026\001\001\000\012\004\163\010\033\011" +
    "\055\012\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\157\004\044\005\027\006\037\010\033\011" +
    "\034\012\031\001\001\000\004\002\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\112\004\116\005\113\006\115\010\062\011\114\012\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\074\010\033\011\055\012\031" +
    "\001\001\000\012\004\073\010\033\011\055\012\031\001" +
    "\001\000\012\004\072\010\033\011\055\012\031\001\001" +
    "\000\012\004\071\010\033\011\055\012\031\001\001\000" +
    "\012\004\070\010\033\011\055\012\031\001\001\000\012" +
    "\004\067\010\033\011\055\012\031\001\001\000\012\004" +
    "\054\010\033\011\055\012\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\060\010\062\011\061\012" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\101\010\033\011" +
    "\055\012\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\111\010\033\011\055\012\031\001\001\000\012" +
    "\004\110\010\033\011\055\012\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\146\006\037\001\001\000\006" +
    "\005\145\006\037\001\001\000\006\005\144\006\037\001" +
    "\001\000\006\005\143\006\037\001\001\000\006\005\142" +
    "\006\037\001\001\000\006\005\141\006\037\001\001\000" +
    "\006\005\140\006\037\001\001\000\006\005\137\006\037" +
    "\001\001\000\002\001\001\000\006\005\136\006\037\001" +
    "\001\000\006\005\134\006\037\001\001\000\006\005\135" +
    "\006\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\155\004\044\005\027\006\037\010\033\011" +
    "\034\012\031\001\001\000\020\003\154\004\044\005\027" +
    "\006\037\010\033\011\034\012\031\001\001\000\020\003" +
    "\153\004\044\005\027\006\037\010\033\011\034\012\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExpCCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExpCCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExpCCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ExpCCParser$actions {

 


  Utilities utilities;
  private final ExpCCParser parser;

  /** Constructor */
  CUP$ExpCCParser$actions(ExpCCParser parser) {
    this.parser = parser;
    utilities = this.parser.utilities;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ExpCCParser$do_action(
    int                        CUP$ExpCCParser$act_num,
    java_cup.runtime.lr_parser CUP$ExpCCParser$parser,
    java.util.Stack            CUP$ExpCCParser$stack,
    int                        CUP$ExpCCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ExpCCParser$result;

      /* select the action based on the action number */
      switch (CUP$ExpCCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // set_magnitude ::= LPAREN set_magnitude RPAREN 
            {
              String RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "(" + sm + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_magnitude",4, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // set_magnitude ::= PIPE set_expr PIPE 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "|" + se + "|"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_magnitude",4, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // int_expr ::= LPAREN int_expr RPAREN 
            {
              String RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String ie = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "(" + ie + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("int_expr",3, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // int_expr ::= INTEGER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = i + ""; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("int_expr",3, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // int_expr ::= set_magnitude 
            {
              String RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = sm; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("int_expr",3, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // int_expr ::= int_expr MODULUS int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + "%" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("int_expr",3, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // int_expr ::= int_expr MULTIPLY int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + "*" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("int_expr",3, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // int_expr ::= int_expr PLUS int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + "+" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("int_expr",3, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // int_expr ::= int_expr MINUS int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + "-" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("int_expr",3, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // empty_set ::= LPAREN empty_set RPAREN 
            {
              String RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String es = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "(" + es + ")" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("empty_set",8, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // empty_set ::= EMPTYSET 
            {
              String RESULT =null;
		 RESULT = "empty" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("empty_set",8, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // singleton ::= LPAREN singleton RPAREN 
            {
              String RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int singright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String sing = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "(" + sing + ")" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("singleton",7, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // singleton ::= INIT LPAREN AGENT_IDENTIFIER RPAREN 
            {
              String RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "init(" + ai + ")" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("singleton",7, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // set_proper ::= LPAREN set_proper RPAREN 
            {
              String RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String sp = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "(" + sp + ")" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_proper",6, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // set_proper ::= FIN LPAREN AGENT_IDENTIFIER RPAREN 
            {
              String RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "fin(" + ai + ")" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_proper",6, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // set_proper ::= SECRET LPAREN AGENT_IDENTIFIER RPAREN 
            {
              String RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "secret(" + ai + ")" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_proper",6, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // set_expr ::= LPAREN set_expr RPAREN 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "(" + se + ")" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_expr",2, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // set_expr ::= empty_set 
            {
              String RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String es = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = es; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_expr",2, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // set_expr ::= singleton 
            {
              String RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int singright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sing = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = sing; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_expr",2, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // set_expr ::= set_proper 
            {
              String RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sp = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = sp; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_expr",2, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // set_expr ::= COMPLEMENT LPAREN set_expr RPAREN 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "\\complement" + "(" + se + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_expr",2, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // set_expr ::= set_expr UNION set_expr 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + se1 + "\\cup" + se2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_expr",2, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // set_expr ::= set_expr INTERSECTION set_expr 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + se1 + "\\cap" + se2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_expr",2, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // set_expr ::= set_expr MINUS set_expr 
            {
              String RESULT =null;
		int sm1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int sm1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String sm1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int sm2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int sm2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sm2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + sm1 + "-" + sm2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_expr",2, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // set_boolean_expr ::= LPAREN set_boolean_expr RPAREN 
            {
              String RESULT =null;
		int sbeleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int sberight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String sbe = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = "(" + sbe + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // set_boolean_expr ::= FALSE 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // set_boolean_expr ::= TRUE 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // set_boolean_expr ::= int_expr NOTEQUAL int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + "!=" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // set_boolean_expr ::= int_expr DOUBLEEQUAL int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + "==" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // set_boolean_expr ::= int_expr LESSTHANEQUAL int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + "<=" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // set_boolean_expr ::= int_expr LESSTHAN int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + "<" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // set_boolean_expr ::= int_expr GREATERTHANEQUAL int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + ">=" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // set_boolean_expr ::= int_expr GREATERTHAN int_expr 
            {
              String RESULT =null;
		int ie1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ie1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ie1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String ie2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + ie1 + ">" + ie2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // set_boolean_expr ::= set_expr NOTEQUAL set_expr 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + se1 + "!=" + se2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // set_boolean_expr ::= set_expr DOUBLEEQUAL set_expr 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + se1 + "==" + se2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_boolean_expr ::= set_expr PROPERSUBSET set_expr 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + se1 + "\\subseteq" + se2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // set_boolean_expr ::= set_expr SUBSET set_expr 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + se1 + "\\subset" + se2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_boolean_expr ::= singleton NOTSETELEMENT set_expr 
            {
              String RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int singright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String sing = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + sing + "\\notin" + se + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_boolean_expr ::= singleton SETELEMENT set_expr 
            {
              String RESULT =null;
		int singleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int singright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String sing = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + sing + "\\in" + se + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_boolean_expr ::= NOT set_boolean_expr 
            {
              String RESULT =null;
		int sbeleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int sberight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sbe = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "\\neg (" + sbe + ")" ; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_boolean_expr ::= set_boolean_expr IMPLIES set_boolean_expr 
            {
              String RESULT =null;
		int sbe1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int sbe1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String sbe1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int sbe2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int sbe2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sbe2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + sbe1 + "->" + sbe2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set_boolean_expr ::= set_boolean_expr OR set_boolean_expr 
            {
              String RESULT =null;
		int sbe1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int sbe1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String sbe1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int sbe2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int sbe2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sbe2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + sbe1 + "||" + sbe2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set_boolean_expr ::= set_boolean_expr AND set_boolean_expr 
            {
              String RESULT =null;
		int sbe1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int sbe1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String sbe1 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int sbe2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int sbe2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sbe2 = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = "(" + sbe1 + "&&" + sbe2 + ")"; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("set_boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // condition_expr ::= LPAREN condition_expr RPAREN 
            {
              HashSet<SituationBHive> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		HashSet<SituationBHive> ce = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		 RESULT = ce; 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // condition_expr ::= NOT condition_expr 
            {
              HashSet<SituationBHive> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		HashSet<SituationBHive> ce = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = utilities.getCondExprNOT(ce); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // condition_expr ::= condition_expr IMPLIES condition_expr 
            {
              HashSet<SituationBHive> RESULT =null;
		int ce1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ce1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		HashSet<SituationBHive> ce1 = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ce2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ce2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		HashSet<SituationBHive> ce2 = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = utilities.getCondExprImplication(ce1, ce2); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // condition_expr ::= condition_expr AND condition_expr 
            {
              HashSet<SituationBHive> RESULT =null;
		int ce1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ce1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		HashSet<SituationBHive> ce1 = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ce2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ce2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		HashSet<SituationBHive> ce2 = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = utilities.getCondExprANDOperator(ce1, ce2); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // condition_expr ::= condition_expr OR condition_expr 
            {
              HashSet<SituationBHive> RESULT =null;
		int ce1left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int ce1right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		HashSet<SituationBHive> ce1 = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int ce2left = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ce2right = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		HashSet<SituationBHive> ce2 = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = utilities.getCondExprOROperator(ce1, ce2); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // condition_expr ::= AGENT_IDENTIFIER NOT KNOWS NT$1 condition_expr 
            {
              HashSet<SituationBHive> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (HashSet<SituationBHive>) ((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-4)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-4)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-4)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		HashSet<SituationBHive> ce = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = utilities.getNotKnowsCondExpr(Integer.parseInt(ai), ce); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-4)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              HashSet<SituationBHive> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
 utilities.updateTT(ai); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // condition_expr ::= AGENT_IDENTIFIER KNOWS NT$0 condition_expr 
            {
              HashSet<SituationBHive> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (HashSet<SituationBHive>) ((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		HashSet<SituationBHive> ce = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = utilities.getKnowsCondExpr(Integer.parseInt(ai), ce); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              HashSet<SituationBHive> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
 utilities.updateTT(ai); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // condition_expr ::= AGENT_IDENTIFIER NOT KNOWS set_boolean_expr 
            {
              HashSet<SituationBHive> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)).value;
		int sbeleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int sberight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sbe = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = utilities.getNotKnowsSetBooleanExpr(Integer.parseInt(ai), sbe); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= condition_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).right;
		HashSet<SituationBHive> start_val = (HashSet<SituationBHive>)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)).value;
		RESULT = start_val;
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExpCCParser$parser.done_parsing();
          return CUP$ExpCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // condition_expr ::= AGENT_IDENTIFIER KNOWS set_boolean_expr 
            {
              HashSet<SituationBHive> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)).value;
		int sbeleft = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).left;
		int sberight = ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()).right;
		String sbe = (String)((java_cup.runtime.Symbol) CUP$ExpCCParser$stack.peek()).value;
		 RESULT = utilities.getKnowsSetBooleanExpr(Integer.parseInt(ai), sbe); 
              CUP$ExpCCParser$result = parser.getSymbolFactory().newSymbol("condition_expr",0, ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.elementAt(CUP$ExpCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpCCParser$stack.peek()), RESULT);
            }
          return CUP$ExpCCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

